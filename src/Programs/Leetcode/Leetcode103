/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();

        if(root==null){
            return result;
        }

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean LeftToRight = true; // flag to check the direction
        while(!q.isEmpty()){
            int levelSize = q.size();
            LinkedList<Integer> currLevel = new LinkedList<>();
            for(int i=0; i<levelSize; i++){
                TreeNode temp = q.poll();
                if(LeftToRight){
                    currLevel.addLast(temp.val);
                }else{
                    currLevel.addFirst(temp.val);
                }
                if(temp.left!=null){
                q.offer(temp.left);
                }
                if(temp.right!=null){
                    q.offer(temp.right);
                }
            }

            result.add(currLevel);
            LeftToRight = !LeftToRight;
        }

        return result;
    }
}